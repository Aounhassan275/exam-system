<?php

namespace App\Helpers;

use DateTime;
use stdClass;

class PaymentGateway
{
    public static function proccess()
    {
        $merchant_id='APIMER';
        $merchant_sub_id='BHUMLU';
        $sign_key='Esxqg1Muw3JckZNex8bzVJuuI3SAe9dx';
        $encryption_key = hash('sha256','B3C5B55D30945CAE40B773492660504B',true);
        $encryption_iv = 'LcvAlRwl4rdVj6Rj';
        $token_generation_url = 'https://testapp.iobnet.org/iobpay/iobpayRESTService/apitokenservice/generatenewtoken';
        $txn_initiation_url = 'https://testapp.iobnet.org/iobpay/apitxninit.do';
        $feetype = "ALL FEES";
        
        $merchantreplyurl = "https://merchantreplyurl.com"; # merchant reply url to be replaced here
        $totalamt = "1.0";
        $merchanttxnid = uniqid(); // unique id to be generated by merchant for each txn . Ensure to save in db.
        $udf1 = ""; //any user defined value to be passed which may be used for future reference. Ex : Roll no , name , course, etc.
        $udf2 = ""; //any user defined value to be passed which may be used for future reference. Ex : Roll no , name , course, etc.
        $udf3 = ""; //any user defined value to be passed which may be used for future reference. Ex : Roll no , name , course, etc.
        $decodedData = PaymentGateway::generateToken($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$token_generation_url,$totalamt,$feetype,$merchantreplyurl);
        dd($decodedData);
        $tokenId = $decodedData->tokenid; //ensure to save in db
        if($tokenId != NULL)
        {
                $txninitfinalString=PaymentGateway::initiateTxn($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$txn_initiation_url,$tokenId,$merchanttxnid,$udf1,$udf2,$udf3,$totalamt,$feetype);
        }
    } 
    public static function generateToken($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$token_generation_url,$totalamt,$feetype,$merchantreplyurl)
    {
        $paymentObject = new stdClass;
        $paymentObject->merchantid = $merchant_id;
        $paymentObject->merchantsubid = $merchant_sub_id;
        $paymentObject->feetype = $feetype;
        $paymentObject->totalamt = $totalamt;
        $paymentObject->replyurl = $merchantreplyurl;
        
        $paymentObject->action = 'GENTOK';
        $data_string = json_encode($paymentObject);
        $data_string = PaymentGateway::pkcs5_pad($data_string,16);

        // $paymentData = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $encryption_key,$data_string, MCRYPT_MODE_CBC, $encryption_iv));
        $paymentData = base64_encode(openssl_encrypt ( $data_string , 'AES-256-CBC' , $encryption_key , OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $encryption_iv));//php 7.1 and above
        $paymentTokenObj = new stdClass;
        $paymentTokenObj->merchantid = $merchant_id;
        $paymentTokenObj->merchantsubid = $merchant_sub_id;
        $paymentTokenObj->action = 'GENTOK';
        $paymentTokenObj->data = $paymentData;
        $hmac = strtoupper(hash_hmac('sha256', $paymentData, $sign_key));
        $paymentTokenObj->hmac = $hmac;
        // dd($paymentTokenObj);
        $paymentTokenString = json_encode($paymentTokenObj);
        $ch = curl_init($token_generation_url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POSTFIELDS, $paymentTokenString);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json',
                'Content-Length: ' . strlen($paymentTokenString))
        );
        curl_setopt($ch,CURLOPT_FAILONERROR,true);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); 
        curl_setopt($ch, CURLOPT_TIMEOUT, 1000); //timeout in seconds		
        curl_setopt ($ch, CURLOPT_SSLVERSION, 6); //TLS 1.2
        $result = curl_exec($ch);
        if(curl_error($ch))
        {
            $curl_errno= curl_errno($ch);
            dd(curl_error($ch));
        }
        else
        {
            $decodedVal = json_decode($result);
            $retData = $decodedVal->data;
            //$res = pkcs5_unpad(mcrypt_decrypt(MCRYPT_RIJNDAEL_128,$encryption_key,base64_decode($retData), MCRYPT_MODE_CBC, $encryption_iv));
            $res = PaymentGateway::pkcs5_unpad(openssl_decrypt ( base64_decode($retData) , 'AES-256-CBC' , $encryption_key ,OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $encryption_iv)); //php 7.1 and above
            $decodedData = json_decode($res);
            return $decodedData;
        }
    }
    

    public static function initiateTxn($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$txn_initiation_url,$tokenId,$merchanttxnid,$udf1,$udf2,$udf3,$totalamt,$feetype)
    {
				$txninitObject = new stdClass;
				$txninitObject->merchantid = $merchant_id;
				$txninitObject->merchantsubid = $merchant_sub_id;
				$txninitObject->feetype = $feetype;
				$txninitObject->totalamt = $totalamt;
				$txninitObject->action = 'TXNINIT';
				$txninitObject->tokenid = $tokenId;
				$txninitObject->merchanttxnid = $merchanttxnid; 
				$txninitObject->udf1 = $udf1; 
				$txninitObject->udf2 = $udf2; 
				$txninitObject->udf3 = $udf3; 

				$txninitdata_string = json_encode($txninitObject);
				$txninitdata_string = pkcs5_pad($txninitdata_string,16);


				//$txninitData = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $encryption_key,$txninitdata_string, MCRYPT_MODE_CBC, $encryption_iv));
                $txninitData = base64_encode(openssl_encrypt ( $txninitdata_string , 'AES-256-CBC' , $encryption_key , OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $encryption_iv));//php 7.1 and above
				$txninitfinalobj = new stdClass;
				$txninitfinalobj->merchantid = $merchant_id;
				$txninitfinalobj->merchantsubid = $merchant_sub_id;
				$txninitfinalobj->action = 'TXNINIT';
				$txninitfinalobj->data = $txninitData;
				$hmac = strtoupper(hash_hmac('sha256', $txninitData, $sign_key));
				$txninitfinalobj->hmac = $hmac;

				$txninitfinalString = json_encode($txninitfinalobj);
				$txninitfinalString = str_replace("\"", "&quot;", $txninitfinalString); //to convery double quotes to &quot; before form submission
				return $txninitfinalString;
				//pass this txninitfinalString as reqjson parameter from browser using POST method form submission to IOBPAY txninit url

    }

    public static function logmessages($msg)
    {
            error_log("\n".(new DateTime())->format("d:m:y h:i:s")." ".$msg,3,"/home/cabox/workspace/logs/infolog.log");
    }

    public static function pkcs5_pad ($text, $blocksize) 
    { 
        $pad = $blocksize - (strlen($text) % $blocksize); 
        return $text . str_repeat(chr($pad), $pad); 
    } 

    public static function pkcs5_unpad($text) 
    { 
        $pad = ord(strlen($text)-1); 
        if ($pad > strlen($text)) return false; 
        if (strspn($text, chr($pad), strlen($text) - $pad) != $pad) return false; 
        return substr($text, 0, -1 * $pad); 
    }
}
